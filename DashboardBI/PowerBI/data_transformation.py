import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json

class CSGODataProcessor:
    def __init__(self):
        self.predictions_file = "predictions.txt"
        self.output_file = "csgo_dashboard_data.csv"
    
    def parse_predictions_file(self, file_path):
        """
        Parse the predictions.txt file generated by your CS:GO predictor
        Assumes format: [CT Win%, T Win%] with timestamp
        """
        data = []
        
        try:
            with open(file_path, 'r') as file:
                lines = file.readlines()
                
            for i, line in enumerate(lines):
                line = line.strip()
                if line and '[' in line and ']' in line:
                    # Extract prediction values
                    pred_str = line[line.find('['):line.find(']')+1]
                    try:
                        # Parse the prediction array
                        pred_values = eval(pred_str)
                        ct_prob = pred_values[0]
                        t_prob = pred_values[1]
                        
                        # Generate synthetic timestamp (you can modify this based on your actual data)
                        timestamp = datetime.now() - timedelta(minutes=len(lines)-i)
                        
                        data.append({
                            'timestamp': timestamp,
                            'round_number': i + 1,
                            'ct_win_probability': ct_prob,
                            't_win_probability': t_prob,
                            'prediction_confidence': max(ct_prob, t_prob),
                            'predicted_winner': 'CT' if ct_prob > t_prob else 'T'
                        })
                    except:
                        continue
                        
        except FileNotFoundError:
            print(f"File {file_path} not found. Using sample data.")
            return self.generate_sample_data()
            
        return pd.DataFrame(data)
    
    def generate_sample_data(self):
        """Generate sample data for demonstration"""
        np.random.seed(42)
        
        maps = ['de_dust2', 'de_mirage', 'de_inferno', 'de_cache', 'de_overpass']
        data = []
        
        for match_id in range(1, 6):  # 5 matches
            map_name = np.random.choice(maps)
            match_start = datetime.now() - timedelta(days=match_id)
            
            for round_num in range(1, 31):  # 30 rounds per match
                # Simulate realistic probabilities
                base_ct_prob = np.random.uniform(30, 80)
                ct_prob = round(base_ct_prob, 1)
                t_prob = round(100 - ct_prob, 1)
                
                # Simulate game state
                time_left = np.random.randint(60, 120)
                bomb_planted = np.random.choice([0, 1], p=[0.7, 0.3])
                ct_alive = np.random.randint(1, 6)
                t_alive = np.random.randint(1, 6)
                
                # Simulate actual winner (with some correlation to prediction)
                actual_winner = 'CT' if np.random.random() < (ct_prob/100) else 'T'
                predicted_winner = 'CT' if ct_prob > t_prob else 'T'
                prediction_accuracy = 1 if actual_winner == predicted_winner else 0
                
                timestamp = match_start + timedelta(minutes=round_num*2)
                
                data.append({
                    'match_id': match_id,
                    'timestamp': timestamp,
                    'map_name': map_name,
                    'round_number': round_num,
                    'ct_win_probability': ct_prob,
                    't_win_probability': t_prob,
                    'predicted_winner': predicted_winner,
                    'actual_winner': actual_winner,
                    'prediction_accuracy': prediction_accuracy,
                    'prediction_confidence': max(ct_prob, t_prob),
                    'time_left': time_left,
                    'bomb_planted': bomb_planted,
                    'ct_players_alive': ct_alive,
                    't_players_alive': t_alive,
                    'ct_total_health': ct_alive * np.random.randint(80, 100),
                    't_total_health': t_alive * np.random.randint(80, 100),
                    'round_type': 'Pistol' if round_num in [1, 16] else 'Gun'
                })
        
        return pd.DataFrame(data)
    
    def add_calculated_fields(self, df):
        """Add calculated fields for Power BI analysis"""
        df['date'] = df['timestamp'].dt.date
        df['hour'] = df['timestamp'].dt.hour
        df['probability_difference'] = abs(df['ct_win_probability'] - df['t_win_probability'])
        df['high_confidence'] = df['prediction_confidence'] > 70
        df['close_round'] = df['probability_difference'] < 20
        df['player_advantage'] = df['ct_players_alive'] - df['t_players_alive']
        df['health_advantage'] = df['ct_total_health'] - df['t_total_health']
        
        return df
    
    def export_for_powerbi(self, df, filename):
        """Export data in Power BI friendly format"""
        df.to_csv(filename, index=False)
        print(f"Data exported to {filename}")
        
        # Also create a JSON summary for additional insights
        summary = {
            'total_rounds': len(df),
            'total_matches': df['match_id'].nunique() if 'match_id' in df.columns else 1,
            'average_accuracy': df['prediction_accuracy'].mean() if 'prediction_accuracy' in df.columns else 0,
            'maps_played': df['map_name'].unique().tolist() if 'map_name' in df.columns else [],
            'high_confidence_rounds': (df['prediction_confidence'] > 70).sum(),
            'close_rounds': (df['probability_difference'] < 20).sum()
        }
        
        with open('dashboard_summary.json', 'w') as f:
            json.dump(summary, f, indent=2, default=str)
        
        return summary

def main():
    processor = CSGODataProcessor()
    
    # Try to load actual predictions file, fallback to sample data
    try:
        df = processor.parse_predictions_file("predictions.txt")
    except:
        print("Using sample data for demonstration...")
        df = processor.generate_sample_data()
    
    # Add calculated fields
    df = processor.add_calculated_fields(df)
    
    # Export for Power BI
    summary = processor.export_for_powerbi(df, "csgo_dashboard_data.csv")
    
    print("\nData Summary:")
    for key, value in summary.items():
        print(f"{key}: {value}")
    
    print("\nData ready for Power BI import!")
    print("Import 'csgo_dashboard_data.csv' into Power BI Desktop")

if __name__ == "__main__":
    main()